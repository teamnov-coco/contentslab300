!function(e){var t={};function i(n){if(t[n])return t[n].exports;var s=t[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,i),s.l=!0,s.exports}i.m=e,i.c=t,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)i.d(n,s,function(t){return e[t]}.bind(null,s));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=0)}([function(e,t,i){"use strict";function n(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}i.r(t);var s=function(){function e(t,i){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.element=document.getElementById(t),this.elementWidth=this.element.clientWidth,this.idx=0,this.maxIdx=i-1,this.isScrolling=!1,this.startX=0,this.memoryX=0,this.direction=null,this.moveEventCallback=null,this.element.addEventListener("touchstart",(function(e){n.sliderTouchStartListener(e)}),{passive:!0,capture:!1}),this.element.addEventListener("touchmove",(function(e){n.sliderTouchMoveListener(e)}),{passive:!0,capture:!1}),this.element.addEventListener("touchend",(function(e){n.sliderTouchEndListener(e)}),{passive:!0,capture:!1})}var t,i,s;return t=e,(i=[{key:"_scrollTo",value:function(e,t,i){var n=this;i=i||600;var s=(new Date).getTime(),r=s+i,o=t-e;requestAnimationFrame((function t(){var l=(new Date).getTime(),a=(l-s)/i;a=1===a?1:1-Math.pow(2,-10*a),l<=r?(n.element.scrollLeft=e+a*o,requestAnimationFrame(t)):n.element.scrollLeft=n.idx*n.elementWidth}))}},{key:"sliderTouchStartListener",value:function(e){this.isScrolling=!0,this.startX=e.touches[0].screenX}},{key:"sliderTouchMoveListener",value:function(e){var t=e.touches[0].screenX,i=Math.abs(Math.abs(t)-Math.abs(this.memoryX));10<=i&&(i=10),this.memoryX<t&&0!=this.memoryX?(this.element.scrollLeft-=i,this.direction=40>Math.abs(Math.abs(t)-Math.abs(this.startX))?null:"right"):this.memoryX>t&&(this.element.scrollLeft+=i,this.direction=40>Math.abs(Math.abs(t)-Math.abs(this.startX))?null:"left"),this.memoryX=t}},{key:"sliderTouchEndListener",value:function(e){this.isScrolling=!1,this.startX=0,"left"===this.direction&&this.maxIdx!=this.idx?(this.idx++,this._scrollTo(this.element.scrollLeft,this.idx*this.elementWidth,300),null!=this.moveEventCallback&&this.moveEventCallback({direction:"left"})):"right"===this.direction&&0!=this.idx?(this.idx--,this._scrollTo(this.element.scrollLeft,this.idx*this.elementWidth,300),null!=this.moveEventCallback&&this.moveEventCallback({direction:"right"})):this._scrollTo(this.element.scrollLeft,this.idx*this.elementWidth,50),this.memoryX=0}},{key:"resizingWrapper",value:function(){this.elementWidth=this.element.clientWidth,this.element.scrollLeft=this.idx*this.elementWidth}},{key:"moveTo",value:function(e){0>e||this.maxIdx<e?console.error("Overflow Slider Index."):(this.idx=e,this._scrollTo(this.element.scrollLeft,this.idx*this.elementWidth,300))}},{key:"prev",value:function(){0!=this.idx&&this.moveTo(--this.idx)}},{key:"next",value:function(){this.maxIdx!=this.idx&&this.moveTo(++this.idx)}},{key:"addMoveEventListener",value:function(e){this.moveEventCallback=e}},{key:"removeMoveEventListener",value:function(){this.moveEventCallback=null}}])&&n(t.prototype,i),s&&n(t,s),e}();var r=new s("cardWrap",10),o=document.getElementById("nav"),l=o.clientWidth,a=l/5,c=0;o.addEventListener("click",(function(e){for(var t=o.getElementsByTagName("img"),i=0,n=t.length;i<n;i++){var s=t[i].classList;s.contains("on")&&s.remove("on")}var l=e.target;l.classList.add("on");var h=l.dataset.idx;c<h&&2<h?o.scrollLeft+=a:c>h&&7>h&&(o.scrollLeft-=a),r.moveTo(h),c=h})),r.addMoveEventListener((function(e){for(var t=o.getElementsByTagName("img"),i=0,n=t.length;i<n;i++){var s=t[i].classList;s.contains("on")&&s.remove("on")}var l=r.idx;t[l].classList.add("on"),c<l&&2<l?o.scrollLeft+=a:c>l&&7>l&&(o.scrollLeft-=a),c=l})),window.addEventListener("touchstart",(function(e){r.isScrolling&&e.preventDefault()}),{passive:!1,capture:!1}),window.addEventListener("resize",(function(e){r.resizingWrapper(),l=o.clientWidth,a=l/5}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vanMvc2xpZGVyLmpzIiwid2VicGFjazovLy8uL2luZGV4LmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiU2xpZGVyIiwiaWQiLCJpdGVtQ291bnQiLCJ0aGlzIiwiZWxlbWVudCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJlbGVtZW50V2lkdGgiLCJjbGllbnRXaWR0aCIsImlkeCIsIm1heElkeCIsImlzU2Nyb2xsaW5nIiwic3RhcnRYIiwibWVtb3J5WCIsImRpcmVjdGlvbiIsIm1vdmVFdmVudENhbGxiYWNrIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2dCIsInNsaWRlclRvdWNoU3RhcnRMaXN0ZW5lciIsInBhc3NpdmUiLCJjYXB0dXJlIiwic2xpZGVyVG91Y2hNb3ZlTGlzdGVuZXIiLCJzbGlkZXJUb3VjaEVuZExpc3RlbmVyIiwiZW5kWCIsImR1cmF0aW9uIiwic3RhcnRUaW1lIiwiRGF0ZSIsImdldFRpbWUiLCJlbmRUaW1lIiwid2lsbERpc3RhbmNlIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiYW5pbWF0ZSIsIm5vd1RpbWUiLCJwcm9ncmVzcyIsIk1hdGgiLCJwb3ciLCJzY3JvbGxMZWZ0IiwidG91Y2hlcyIsInNjcmVlblgiLCJjdXJyZW50WCIsIm1vdmVkUGl4ZWwiLCJhYnMiLCJfc2Nyb2xsVG8iLCJudW1iZXIiLCJjb25zb2xlIiwiZXJyb3IiLCJtb3ZlVG8iLCJjYWxsYmFjayIsInNsaWRlciIsIm5hdiIsIm5hdldpZHRoIiwibmF2VW5pdCIsIm1lbUlkeCIsImUiLCJpbWFnZXMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImxlbmd0aCIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwicmVtb3ZlIiwidGd0IiwidGFyZ2V0IiwiYWRkIiwiZGF0YXNldCIsImlmTWF4Q291bnQiLCJhZGRNb3ZlRXZlbnRMaXN0ZW5lciIsIndpbmRvdyIsInByZXZlbnREZWZhdWx0IiwicmVzaXppbmdXcmFwcGVyIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sS0FRdkRyQixFQUFvQnNCLEVBQUks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LEVBQVMzQyxHQWpERSxFQWlEa0JBLEVBQzdCd0MsRUFBSWIsWUFBY2UsRUFDWEMsRUFBUzNDLEdBbERKdUQsRUFrRHlCdkQsSUFDckN3QyxFQUFJYixZQUFjZSxHQUd0QkMsRUFBUzNDLEtBSWJ5RCxPQUFPbEQsaUJBQWlCLGNBQWMsU0FBQ3FDLEdBQy9CTCxFQUFPckMsYUFDUDBDLEVBQUVjLG1CQUVQLENBQ0NoRCxTQUFTLEVBQ1RDLFNBQVMsSUFHYjhDLE9BQU9sRCxpQkFBaUIsVUFBVSxTQUFDcUMsR0FDL0JMLEVBQU9vQixrQkFDUGxCLEVBQVdELEVBQUl6QyxZQUNmMkMsRUFBVUQsRUFBVyIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBTbGlkZXIge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGlkLCBpdGVtQ291bnQpIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50V2lkdGggPSB0aGlzLmVsZW1lbnQuY2xpZW50V2lkdGg7XHJcblxyXG4gICAgICAgIHRoaXMuaWR4ID0gMDtcclxuICAgICAgICB0aGlzLm1heElkeCA9IGl0ZW1Db3VudCAtIDE7XHJcblxyXG4gICAgICAgIHRoaXMuaXNTY3JvbGxpbmcgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgdGhpcy5zdGFydFggPSAwO1xyXG4gICAgICAgIHRoaXMubWVtb3J5WCA9IDA7XHJcblxyXG4gICAgICAgIHRoaXMuZGlyZWN0aW9uID0gbnVsbDsgLypsZWZ0IG9yIHJpZ2h0ICovXHJcblxyXG4gICAgICAgIHRoaXMubW92ZUV2ZW50Q2FsbGJhY2sgPSBudWxsO1xyXG5cclxuICAgICAgICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIChldnQpPT57XHJcbiAgICAgICAgICAgIHRoaXMuc2xpZGVyVG91Y2hTdGFydExpc3RlbmVyKGV2dCk7XHJcbiAgICAgICAgfSwge3Bhc3NpdmU6IHRydWUsIGNhcHR1cmU6IGZhbHNlfSk7XHJcblxyXG4gICAgICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCAoZXZ0KT0+e1xyXG4gICAgICAgICAgICB0aGlzLnNsaWRlclRvdWNoTW92ZUxpc3RlbmVyKGV2dCk7XHJcbiAgICAgICAgfSwge3Bhc3NpdmU6IHRydWUsIGNhcHR1cmU6IGZhbHNlfSk7XHJcblxyXG4gICAgICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIChldnQpPT57XHJcbiAgICAgICAgICAgIHRoaXMuc2xpZGVyVG91Y2hFbmRMaXN0ZW5lcihldnQpO1xyXG4gICAgICAgIH0sIHtwYXNzaXZlOiB0cnVlLCBjYXB0dXJlOiBmYWxzZX0pO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBfc2Nyb2xsVG8oc3RhcnRYLCBlbmRYLCBkdXJhdGlvbikge1xyXG4gICAgICAgIGR1cmF0aW9uID0gZHVyYXRpb24gPyBkdXJhdGlvbiA6IDYwMDtcclxuICAgICAgICBjb25zdCBzdGFydFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgICAgICBjb25zdCBlbmRUaW1lID0gc3RhcnRUaW1lICsgZHVyYXRpb247XHJcbiAgICAgICAgY29uc3Qgd2lsbERpc3RhbmNlID0gZW5kWCAtIHN0YXJ0WDtcclxuXHJcbiAgICAgICAgY29uc3QgYW5pbWF0ZSA9ICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3Qgbm93VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgICAgICAgICBjb25zdCBwYXNzZWRUaW1lID0gbm93VGltZSAtIHN0YXJ0VGltZTtcclxuICAgICAgICAgICAgbGV0IHByb2dyZXNzID0gcGFzc2VkVGltZSAvIGR1cmF0aW9uO1xyXG4gICAgICAgICAgICAvKiBlYXNlT3V0RXhwbyAqL1xyXG4gICAgICAgICAgICBwcm9ncmVzcyA9ICgocHJvZ3Jlc3MgPT09IDEpID8gMSA6ICgxIC0gTWF0aC5wb3coMiwgLTEwICogcHJvZ3Jlc3MpKSk7XHJcbiAgICAgICAgICAgIGlmKG5vd1RpbWUgPD0gZW5kVGltZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LnNjcm9sbExlZnQgPSBzdGFydFggKyAocHJvZ3Jlc3MgKiB3aWxsRGlzdGFuY2UpO1xyXG4gICAgICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGFuaW1hdGUpO1xyXG4gICAgICAgICAgICB9ZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQuc2Nyb2xsTGVmdCA9ICh0aGlzLmlkeCAqIHRoaXMuZWxlbWVudFdpZHRoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlKTtcclxuICAgIH1cclxuXHJcbiAgICBzbGlkZXJUb3VjaFN0YXJ0TGlzdGVuZXIoZXZ0KSB7XHJcbiAgICAgICAgdGhpcy5pc1Njcm9sbGluZyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5zdGFydFggPSBldnQudG91Y2hlc1swXS5zY3JlZW5YO1xyXG4gICAgfVxyXG5cclxuICAgIHNsaWRlclRvdWNoTW92ZUxpc3RlbmVyKGV2dCkge1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRYID0gZXZ0LnRvdWNoZXNbMF0uc2NyZWVuWDtcclxuXHJcbiAgICAgICAgbGV0IG1vdmVkUGl4ZWwgPSBNYXRoLmFicyhNYXRoLmFicyhjdXJyZW50WCkgLSBNYXRoLmFicyh0aGlzLm1lbW9yeVgpKTtcclxuXHJcbiAgICAgICAgaWYoMTAgPD0gbW92ZWRQaXhlbCkge1xyXG4gICAgICAgICAgICBtb3ZlZFBpeGVsID0gMTA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZih0aGlzLm1lbW9yeVggPCBjdXJyZW50WCAmJiAwICE9IHRoaXMubWVtb3J5WCkge1xyXG5cclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnNjcm9sbExlZnQgLT0gbW92ZWRQaXhlbDtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZGlyZWN0aW9uID0gKDQwID4gTWF0aC5hYnMoTWF0aC5hYnMoY3VycmVudFgpIC0gTWF0aC5hYnModGhpcy5zdGFydFgpKSkgPyBudWxsIDogJ3JpZ2h0JztcclxuXHJcbiAgICAgICAgfWVsc2UgaWYodGhpcy5tZW1vcnlYID4gY3VycmVudFgpIHtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5zY3JvbGxMZWZ0ICs9IG1vdmVkUGl4ZWw7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmRpcmVjdGlvbiA9ICg0MCA+IE1hdGguYWJzKE1hdGguYWJzKGN1cnJlbnRYKSAtIE1hdGguYWJzKHRoaXMuc3RhcnRYKSkpID8gbnVsbCA6ICdsZWZ0JztcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLm1lbW9yeVggPSBjdXJyZW50WDtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgc2xpZGVyVG91Y2hFbmRMaXN0ZW5lcihldnQpIHtcclxuICAgICAgICB0aGlzLmlzU2Nyb2xsaW5nID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5zdGFydFggPSAwO1xyXG5cclxuICAgICAgICBpZignbGVmdCcgPT09IHRoaXMuZGlyZWN0aW9uICYmIHRoaXMubWF4SWR4ICE9IHRoaXMuaWR4KSB7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmlkeCsrO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fc2Nyb2xsVG8odGhpcy5lbGVtZW50LnNjcm9sbExlZnQsICh0aGlzLmlkeCAqIHRoaXMuZWxlbWVudFdpZHRoKSwgMzAwKTtcclxuXHJcbiAgICAgICAgICAgIGlmKG51bGwgIT0gdGhpcy5tb3ZlRXZlbnRDYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tb3ZlRXZlbnRDYWxsYmFjayh7ZGlyZWN0aW9uOiAnbGVmdCd9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9ZWxzZSBpZigncmlnaHQnID09PSB0aGlzLmRpcmVjdGlvbiAmJiAwICE9IHRoaXMuaWR4KSB7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmlkeC0tO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fc2Nyb2xsVG8odGhpcy5lbGVtZW50LnNjcm9sbExlZnQsICh0aGlzLmlkeCAqIHRoaXMuZWxlbWVudFdpZHRoKSwgMzAwKTtcclxuXHJcbiAgICAgICAgICAgIGlmKG51bGwgIT0gdGhpcy5tb3ZlRXZlbnRDYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tb3ZlRXZlbnRDYWxsYmFjayh7ZGlyZWN0aW9uOiAncmlnaHQnfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfWVsc2Uge1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fc2Nyb2xsVG8odGhpcy5lbGVtZW50LnNjcm9sbExlZnQsICh0aGlzLmlkeCAqIHRoaXMuZWxlbWVudFdpZHRoKSwgNTApO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMubWVtb3J5WCA9IDA7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHJlc2l6aW5nV3JhcHBlcigpIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnRXaWR0aCA9IHRoaXMuZWxlbWVudC5jbGllbnRXaWR0aDtcclxuICAgICAgICB0aGlzLmVsZW1lbnQuc2Nyb2xsTGVmdCA9IHRoaXMuaWR4ICogdGhpcy5lbGVtZW50V2lkdGg7XHJcbiAgICB9XHJcblxyXG4gICAgbW92ZVRvKG51bWJlcikge1xyXG4gICAgICAgIGlmKDAgPiBudW1iZXIgfHwgdGhpcy5tYXhJZHggPCBudW1iZXIpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignT3ZlcmZsb3cgU2xpZGVyIEluZGV4LicpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaWR4ID0gbnVtYmVyO1xyXG4gICAgICAgIHRoaXMuX3Njcm9sbFRvKHRoaXMuZWxlbWVudC5zY3JvbGxMZWZ0LCAodGhpcy5pZHggKiB0aGlzLmVsZW1lbnRXaWR0aCksIDMwMCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJldigpIHtcclxuICAgICAgICBpZigwICE9IHRoaXMuaWR4KSB7XHJcbiAgICAgICAgICAgIHRoaXMubW92ZVRvKC0tdGhpcy5pZHgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBuZXh0KCkge1xyXG4gICAgICAgIGlmKHRoaXMubWF4SWR4ICE9IHRoaXMuaWR4KSB7XHJcbiAgICAgICAgICAgIHRoaXMubW92ZVRvKCsrdGhpcy5pZHgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhZGRNb3ZlRXZlbnRMaXN0ZW5lcihjYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMubW92ZUV2ZW50Q2FsbGJhY2sgPSBjYWxsYmFjaztcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVNb3ZlRXZlbnRMaXN0ZW5lcigpIHtcclxuICAgICAgICB0aGlzLm1vdmVFdmVudENhbGxiYWNrID0gbnVsbDtcclxuICAgIH1cclxuXHJcbn0iLCJpbXBvcnQgU2xpZGVyIGZyb20gJy4vanMvc2xpZGVyJztcclxuaW1wb3J0IE5hdmlnYXRvciBmcm9tICcuL2pzL25hdmlnYXRvci5qcyc7IHtcclxuICAgIGNvbnN0IHNsaWRlciA9IG5ldyBTbGlkZXIoJ2NhcmRXcmFwJywgMTApO1xyXG4gICAgLy8gY29uc3QgbmF2aWdhdG9yID0gbmV3IE5hdmlnYXRvcignY2FyZE5hdicsICdsZWZ0QnRuJywgJ3JpZ2h0QnRuJywgMTApO1xyXG5cclxuICAgIGNvbnN0IG5hdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduYXYnKTtcclxuXHJcblxyXG4gICAgY29uc3QgaWZNYXhDb3VudCA9IDEwO1xyXG5cclxuICAgIGxldCBuYXZXaWR0aCA9IG5hdi5jbGllbnRXaWR0aDtcclxuICAgIGxldCBuYXZVbml0ID0gbmF2V2lkdGggLyA1O1xyXG4gICAgbGV0IG1lbUlkeCA9IDA7XHJcbiAgICBjb25zdCBsZWZ0TWF4SWR4ID0gMjtcclxuICAgIGNvbnN0IHJpZ2h0TWF4SWR4ID0gaWZNYXhDb3VudCAtIDNcclxuXHJcbiAgICBuYXYuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gICAgICAgIC8qIOydtOuvuOyngCDshKDtg53si5wgKi9cclxuXHJcbiAgICAgICAgY29uc3QgaW1hZ2VzID0gbmF2LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdpbWcnKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IGltYWdlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IGltYWdlID0gaW1hZ2VzW2ldO1xyXG4gICAgICAgICAgICBjb25zdCBjbGFzc0xpc3QgPSBpbWFnZS5jbGFzc0xpc3Q7XHJcbiAgICAgICAgICAgIGlmIChjbGFzc0xpc3QuY29udGFpbnMoJ29uJykpIHtcclxuICAgICAgICAgICAgICAgIGNsYXNzTGlzdC5yZW1vdmUoJ29uJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHRndCA9IGUudGFyZ2V0O1xyXG4gICAgICAgIHRndC5jbGFzc0xpc3QuYWRkKCdvbicpO1xyXG5cclxuICAgICAgICBjb25zdCBpZHggPSB0Z3QuZGF0YXNldC5pZHg7XHJcblxyXG4gICAgICAgIGlmIChtZW1JZHggPCBpZHggJiYgbGVmdE1heElkeCA8IGlkeCkge1xyXG4gICAgICAgICAgICBuYXYuc2Nyb2xsTGVmdCArPSBuYXZVbml0O1xyXG4gICAgICAgIH0gZWxzZSBpZiAobWVtSWR4ID4gaWR4ICYmIHJpZ2h0TWF4SWR4ID4gaWR4KSB7XHJcbiAgICAgICAgICAgIG5hdi5zY3JvbGxMZWZ0IC09IG5hdlVuaXQ7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcblxyXG4gICAgICAgIHNsaWRlci5tb3ZlVG8oaWR4KTtcclxuXHJcbiAgICAgICAgbWVtSWR4ID0gaWR4O1xyXG4gICAgfSk7XHJcblxyXG4gICAgc2xpZGVyLmFkZE1vdmVFdmVudExpc3RlbmVyKChlKSA9PiB7XHJcbiAgICAgICAgLy8gbmF2aWdhdG9yLm1vdmVUb0RpcmVjdGlvbihlLmRpcmVjdGlvbik7XHJcblxyXG4gICAgICAgIGNvbnN0IGltYWdlcyA9IG5hdi5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaW1nJyk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBpbWFnZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBpbWFnZSA9IGltYWdlc1tpXTtcclxuICAgICAgICAgICAgY29uc3QgY2xhc3NMaXN0ID0gaW1hZ2UuY2xhc3NMaXN0O1xyXG4gICAgICAgICAgICBpZiAoY2xhc3NMaXN0LmNvbnRhaW5zKCdvbicpKSB7XHJcbiAgICAgICAgICAgICAgICBjbGFzc0xpc3QucmVtb3ZlKCdvbicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBpZHggPSBzbGlkZXIuaWR4O1xyXG5cclxuICAgICAgICBpbWFnZXNbaWR4XS5jbGFzc0xpc3QuYWRkKCdvbicpXHJcblxyXG4gICAgICAgIGlmIChtZW1JZHggPCBpZHggJiYgbGVmdE1heElkeCA8IGlkeCkge1xyXG4gICAgICAgICAgICBuYXYuc2Nyb2xsTGVmdCArPSBuYXZVbml0O1xyXG4gICAgICAgIH0gZWxzZSBpZiAobWVtSWR4ID4gaWR4ICYmIHJpZ2h0TWF4SWR4ID4gaWR4KSB7XHJcbiAgICAgICAgICAgIG5hdi5zY3JvbGxMZWZ0IC09IG5hdlVuaXQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBtZW1JZHggPSBpZHg7XHJcblxyXG4gICAgfSk7XHJcblxyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCAoZSkgPT4ge1xyXG4gICAgICAgIGlmIChzbGlkZXIuaXNTY3JvbGxpbmcpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH1cclxuICAgIH0sIHtcclxuICAgICAgICBwYXNzaXZlOiBmYWxzZSxcclxuICAgICAgICBjYXB0dXJlOiBmYWxzZVxyXG4gICAgfSk7XHJcblxyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIChlKSA9PiB7XHJcbiAgICAgICAgc2xpZGVyLnJlc2l6aW5nV3JhcHBlcigpO1xyXG4gICAgICAgIG5hdldpZHRoID0gbmF2LmNsaWVudFdpZHRoO1xyXG4gICAgICAgIG5hdlVuaXQgPSBuYXZXaWR0aCAvIDU7XHJcbiAgICB9KTtcclxuXHJcbn0iXSwic291cmNlUm9vdCI6IiJ9